1.最短路径（dijkstra算法）：

顶点个数:6
请输入邻接矩阵
0 10 inf 4 inf inf 
10 0 8 2 6 inf
inf 8 0 15 1 5
4 2 15 0 6 inf
inf 6 1 6 0 12
inf inf 5 inf 12 0
请输入一个起始点：0
[0, 6.0, 11.0, 4.0, 10.0, 16.0]

最短路径（floyd算法）：
点个数:6
请输入邻接矩阵
0 10 inf 4 inf inf
10 0 8 2 6 inf
inf 8 0 15 1 15
4 2 15 0 6 inf
inf 6 1 6 0 12
inf inf 5 inf 12 0
[[0, 6, 11, 4, 10, 16], [6, 0, 7, 2, 6, 12], [11, 7, 0, 7, 1, 5], [4, 2, 7, 0, 6, 12], [10, 6, 1, 6, 0, 6], [16, 12, 5, 12, 6, 0]]
可发现二者相同

2.最大流算法：
请输入顶点个数:5
请输入邻接矩阵:
0 15 8 0 0
0 0 20 4 10
0 0 0 15 4
0 0 0 0 20
0 0 5 0 0
23
[[0, 15, 8, 0, 0], [0, 0, 1, 4, 10], [0, 0, 0, 5, 4], [0, 0, 0, 0, 9], [0, 0, 0, 0, 0]]

3.最小成本流程序输出结果：
Minimum cost: 160

 Arc    Flow / Capacity Cost
0 -> 1   12  /  15       48.0
0 -> 2    8  /   8       32.0
1 -> 2    8  /  20       16.0
1 -> 3    4  /   4       8.0
1 -> 4    0  /  10       0.0
2 -> 3   12  /  15       12.0
2 -> 4    4  /   4       12.0
3 -> 4   16  /  20       32.0
4 -> 2    0  /   5       0.0



4.最小成本最大流输出结果：
Max flow: 23（发现与上面最大流程序算得的最大流相等）
Minimum cost: 187

 Arc    Flow / Capacity Cost
0 -> 1   15  /  15       60.0
0 -> 2    8  /   8       32.0
1 -> 2   11  /  20       22.0
1 -> 3    4  /   4       8.0
1 -> 4    0  /  10       0.0
2 -> 3   15  /  15       15.0
2 -> 4    4  /   4       12.0
3 -> 4   19  /  20       38.0
4 -> 2    0  /   5       0.0